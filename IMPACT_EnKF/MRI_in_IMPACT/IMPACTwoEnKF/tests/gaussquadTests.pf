@Test
   subroutine testQPlookup()
      use mod_ibm, only: qp_lookup
      use pfunit_mod
      implicit none

      integer, parameter           :: order=3, dimensions=4
      real,dimension(dimensions,3) :: weight_and_qp
      real                         :: expected

      expected = -0.56250000000000
      
      call qp_lookup(order, dimensions, weight_and_qp)

      @assertEqual(expected, weight_and_qp(1,3))
      


   end subroutine testQPlookup


@Test
   subroutine testIntegrand()
      use mod_ibm, only: integrand
      use pfunit_mod
      implicit none

      real  ::  x,y
      real  ::  a,b,c,d,e,f
      real  ::  expected

      x = 3.5
      y = 4.5
      a = 1.75
      b = 3.17
      c = 4.09
      d = 2.86
      e = 6.53
      f = 8.04

      expected = (x*a + y*b + c)*(x*d + y*e + f)

      @assertEqual(expected, integrand(a,b,c,d,e,f,x,y))


   end subroutine testIntegrand


@Test
   subroutine testCalcnodevols()
      use mod_ibm
      use mod_vars
      use pfunit_mod
      implicit none

      integer  ::  no_elems
      real     ::  x1,x2,x3,y1,y2,y3
      real     ::  f1,f2,f3,g1,g2,g3,h1,h2,h3
      real     ::  A

      no_elems = 2
      
      allocate(elems(no_elems,3))
      allocate(yb(2*no_elems,2))
      allocate(node_vol(2*no_elems))
      yb(1,1) = 0.
      yb(1,2) = 0.
      yb(2,1) = 1.
      yb(2,2) = 0.
      yb(3,1) = 1.
      yb(3,2) = 1.
      yb(4,1) = 0.
      yb(4,2) = 1.
      elems(1,:) = (/1, 2, 3/)
      elems(2,:) = (/1, 3, 4/)

      ! This should set up two elements that look like this:
      !    ^
      !    |
      !    |
      !  1_|_______________________
      !    |                      /|  III
      !    | IV                  / |
      !    |                    /  |
      !    |                   /   | 
      !    |                  /    |
      !    |      elem2      /     | 
      !    |                /      |
      !    |               /       |
      !    |              /        |
      !    |             /         |
      !    |            /          |
      !    |           /           |
      !    |          /            |
      !    |         /             |
      !    |        /              |
      !    |       /               |
      !    |      /                |
      !    |     /     elem1       |
      !    |    /                  |
      !    |   /                   |
      !    |  /                    |
      !    | /                     | II
      !   _|/______________________|_________________\
      !   O|                       |                 /
      !      I                      1
      !
      ! Each of them has area 0.5

      CALL calculate_node_volumes(1,A,f1,f2,f3,g1,g2,g3,h1,h2,h3,x1,x2,x3,y1,y2,y3)

      @assertEqual(x1, 0.0)
      @assertEqual(x2, 1.0)
      @assertEqual(x3, 1.0)
      @assertEqual(y1, 0.0)
      @assertEqual(y2, 0.0)
      @assertEqual(y3, 1.0, "corners are correct")
      @assertEqual(A,0.5,"Area is correct")


   end subroutine testCalcnodevols

