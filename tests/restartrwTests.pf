@Test
  subroutine testWrite_restart_ibm()
    use mod_inout, only: write_restart_ibm, start_hdf5_for_testing, stop_hdf5_for_testing
    use mod_vars
    use mod_lib

    use pfunit_mod
    implicit none


    restart = 4
    write_restart_yes = .true.
    
    ! set these fictional attributes that are written to the file
    IB_on = .true.
    time  = 1.456
    dtime = 0.007
    timestep = 121
    mu_blood = 0.01
    rho_blood = 1.
    reach = 1./32.
    M_bound = 6
    M_elems = 4
    ddf_type = 2
    Re = 150.
    E_mod = 4.
    nu_poiss = 0.9

    ub = reshape( (/1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12/), (/6, 2/) )
    yb = reshape( (/10, 11, 12, 13, 14, 15, 10, 11, 12, 13, 14, 15/), (/6, 2/) )

      call start_hdf5_for_testing
      call write_restart_ibm
      call stop_hdf5_for_testing

    @assertFalse(herror==-1)

  end subroutine testWrite_restart_ibm

@Test
  subroutine testRead_restart_ibm()
    use mod_inout, only: read_restart_ibm, start_hdf5_for_testing, stop_hdf5_for_testing
    use mod_vars
    use mod_lib

    use pfunit_mod
    implicit none
    real, dimension(6,2) :: ub_ref, yb_ref
    integer              :: i

    restart = 4
    write_restart_yes = .true. ! not needed really

    M_bound = 6
    yb = reshape( (/0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/), (/6, 2/) )
    xb = reshape( (/0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/), (/6, 2/) )
    ub = reshape( (/0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/), (/6, 2/) )

      call start_hdf5_for_testing
      call num_to_string(3, restart, restart_char)
      call read_restart_ibm
      call stop_hdf5_for_testing

    ub_ref = reshape( (/1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12/), (/6, 2/) )
    yb_ref = reshape( (/10, 11, 12, 13, 14, 15, 10, 11, 12, 13, 14, 15/), (/6, 2/) )

    @assertEqual(yb_ref, yb)
    @assertEqual(ub_ref, ub)

    do i=1,M_bound
      print *, ub(i,:)
    end do

  end subroutine testRead_restart_ibm
